type OffchainAssetVaultFactory @entity {
  id: ID! #factory address
  "Address of the OffchainAssetVault contract"
  address: Bytes! #factory address
  implementation: Bytes #implementation address from Implementation event
  "Stake addresses deployed by this factory"
  children: [OffchainAssetVault!] @derivedFrom(field: "factory") #all the children that were deployed by this factory
  childrenCount: BigInt!
}

type OffchainAssetVault @entity {
  "The contract address"
  id: ID! #OffchainAssetVault contract address
  "Address of this OffchainAssetVault contract"
  address: Bytes! #OffchainAssetVault contract address
  "Block number of contract deployment"
  deployBlock: BigInt! #the block the contract was deployed
  "Timestamp of contract deployment"
  deployTimestamp: BigInt! #the timestamp the contract was deployed
  "Address of deployer"
  deployer: Bytes! #address of the deployer - get from event OffchainAssetVaultConstruction.sender
  "Address of the OffchainAssetVaultFactory that is this contract's parent."
  factory: OffchainAssetVaultFactory! # The factory that deployed this contract
  "The initial admin set when this contract was deployed"
  admin: Bytes! # OffchainAssetVaultConstruction.sender
  "The name of the ERC20 token for this OffchainAssetVault"
  name: String! # OffchainAssetVaultConstruction.receiptVaultConfig.name
  "The symbol for the ERC20 token for this OffchainAssetVault"
  symbol: String! # OffchainAssetVaultConstruction.receiptVaultConfig.symbol
  "This OffchainAssetVault as an account including its associated events"
  asAccount: Account
  "The total number of shares for this OffchainAssetVault"
  totalShares: BigInt! # OffchainAssetVault.totalSupply() - update with every mint/burn
  "The uri for the ERC1155 tokens for this OffchainAssetVault"
  uri: String! # OffchainAssetVaultConstruction.receiptVaultConfig.uri
  "Share holders for this OffchainAssetVault"
  shareHolders: [Account!] # All Accounts that have a ShareBalance for this OffchainAssetVault
  "Share balances for this OffchainAssetVault"
  shareBalances: [SharesBalance!] @derivedFrom(field: "offchainAssetVault")
  "Share approvals for this OffchainAssetVault"
  shareApprovals: [SharesApproval!] @derivedFrom(field: "offchainAssetVault")
  "Share transfers for this OffchainAssetVault"
  shareTransfers: [SharesTransfer!] @derivedFrom(field: "offchainAssetVault")

  "Receipt holders for this OffchainAssetVault"
  receiptHolders: [Account!] # All Accounts that have a ReceiptBalance for an ID for this OffchainAssetVault
  "Receipts for this OffchainAssetVault"
  receipts: [Receipt!]! @derivedFrom(field: "offchainAssetVault")
  "Receipt balances for this OffchainAssetVault"
  receiptBalances: [ReceiptBalance!] @derivedFrom(field: "offchainAssetVault")
  "Receipt operators for this OffchainAssetVault"
  receiptOperators: [ReceiptOperator!]
    @derivedFrom(field: "offchainAssetVault")
  "Receipt transfers for this OffchainAssetVault"
  receiptTransfers: [ReceiptTransfer!]
    @derivedFrom(field: "offchainAssetVault")

  "Deposits for this OffchainAssetVault"
  deposits: [DepositWithReceipt!] @derivedFrom(field: "offchainAssetVault")
  "Withdraws for this OffchainAssetVault"
  withdraws: [WithdrawWithReceipt!] @derivedFrom(field: "offchainAssetVault")

  "The timestamp that this OffchainAssetVault is certified until"
  certifiedUntil: BigInt! # Updated with each new Certify event
  "Certifications for this OffchainAssetVault"
  certifications: [Certify!] @derivedFrom(field: "offchainAssetVault")

  "Share confiscations"
  shareConfiscations: [ConfiscateShares!]
    @derivedFrom(field: "offchainAssetVault")
  "Receipt confiscations"
  receiptConfiscations: [ConfiscateReceipt!]
    @derivedFrom(field: "offchainAssetVault")

  "Role holders"
  roleHolders: [RoleHolder!] @derivedFrom(field: "offchainAssetVault")
  "Roles"
  roles: [Role!] @derivedFrom(field: "offchainAssetVault")
  "Role revoke events"
  roleRevokes: [RoleRevoked!] @derivedFrom(field: "offchainAssetVault")
  "Role granted events"
  rolesGranted: [RoleGranted!] @derivedFrom(field: "offchainAssetVault")
}

type Account @entity {
  id: ID!
  offchainAssetVault: OffchainAssetVault!
  address: Bytes!

  shareBalances: [SharesBalance!]! @derivedFrom(field: "account")
  shareApprovalsOwner: [SharesApproval!]! @derivedFrom(field: "owner")
  shareApprovalsSpender: [SharesApproval!]! @derivedFrom(field: "spender")
  shareTransferFromEvent: [SharesTransfer!]! @derivedFrom(field: "from")
  shareTransferToEvent: [SharesTransfer!]! @derivedFrom(field: "to")

  receiptBalances: [ReceiptBalance!]! @derivedFrom(field: "account")
  receiptOperatorOwner: [ReceiptOperator!]! @derivedFrom(field: "owner")
  receiptOperatorOperator: [ReceiptOperator!]! @derivedFrom(field: "operator")
  receiptTransferFromEvent: [ReceiptTransfer!]! @derivedFrom(field: "from")
  receiptTransferToEvent: [ReceiptTransfer!]! @derivedFrom(field: "to")
  receiptTransferOperatorEvent: [ReceiptTransfer!]!
    @derivedFrom(field: "operator")

  depositWithReceipts: [DepositWithReceipt!] @derivedFrom(field: "caller")
  withdrawWithReceipts: [WithdrawWithReceipt!] @derivedFrom(field: "caller")

  conficateSharesConfiscator: [ConfiscateShares!]!
    @derivedFrom(field: "confiscator")
  conficateSharesConfiscatee: [ConfiscateShares!]!
    @derivedFrom(field: "confiscatee")

  conficateReceiptConfiscator: [ConfiscateShares!]!
    @derivedFrom(field: "confiscator")
  conficateReceiptConfiscatee: [ConfiscateShares!]!
    @derivedFrom(field: "confiscatee")

  certifies: [Certify!]! @derivedFrom(field: "certifier")

  roleHolders: [RoleHolder!]! @derivedFrom(field: "account")
  rolesRevoked: [RoleRevoked!] @derivedFrom(field: "account")
  rolesGranted: [RoleGranted!] @derivedFrom(field: "account")

  events: [Event!]! @derivedFrom(field: "emitter")
}

# Created with every DepositWithReceipt
# Subsequent DepositWithReceipt and WithdrawWithReceipt events update shares
# Receipt information added via the ReceiptInformation event (see below)
type Receipt @entity {
  "ID"
  id: ID! # {OffchainAssetVault address}-{DepositWithReceipt.id}
  "ID of the receipt"
  receiptId: BigInt! # From DepositWithReceipt.id
  "The OffchainAssetVault that this receipt is for"
  offchainAssetVault: OffchainAssetVault!
  "Total shares created for this receipt"
  shares: BigInt! # INCREASES with every DepositWithReceipt and DECREASES with every WithdrawWithReceipt
  "Deposits for this receipt"
  deposits: [DepositWithReceipt!]
  "Withdraws for this receipt"
  withdraws: [WithdrawWithReceipt!]!
  "Holders of this receipt"
  holders: [Account!]! # All Accounts that have a ReceiptBalance for this receiptId
  "Balances for this receipt"
  balances: [ReceiptBalance!]! @derivedFrom(field: "receipt")
  "Transfers for this receipt"
  transfers: [ReceiptTransfer!]! @derivedFrom(field: "token")
  "Information for this receipt"
  receiptInformations: [ReceiptInformation!]! @derivedFrom(field: "receipt")
}

# Created with every DepositWithReceipt event
type DepositWithReceipt implements Event @entity {
  id: ID!
  "The transaction in which DepositWithReceipt was emitted"
  transaction: Transaction!
  "The emitter of the event"
  emitter: Account!
  "Timestamp for DepositWithReceipt event"
  timestamp: BigInt! # the timestamp of the DepositWithReceipt event
  "The OffchainAssetVault that this deposit is for"
  offchainAssetVault: OffchainAssetVault! # OffchainAssetVault that emitted the mint event
  "The receipt this deposit is for"
  receipt: Receipt! # DepositWithReceipt.id
  "The amount of shares and receipts minted with this deposit"
  amount: BigInt! # DepositWithReceipt.shares
  # "The receipt information submitted with the deposit"
  # information: ReceiptInformation! @derivedFrom(field: "receipt")
  "The receiver of the ERC1155 receipts and the ERC20 shares"
  receiver: Account! # From DepositWithReceipt.receiver
  "The caller of the transaction"
  caller: Account! # DepositWithReceipt.caller
}

# Created with every WithdrawWithReceipt event
type WithdrawWithReceipt implements Event @entity {
  id: ID!
  "The transaction in which WithdrawWithReceipt was emitted"
  transaction: Transaction!
  "The emitter of the event"
  emitter: Account!
  "Timestamp for WithdrawWithReceipt event"
  timestamp: BigInt! # the timestamp of the WithdrawWithReceipt event
  "The OffchainAssetVault that this withdraw is for"
  offchainAssetVault: OffchainAssetVault! # OffchainAssetVault that emitted the mint event
  "The receipt this withdraw is for"
  receipt: Receipt! # WithdrawWithReceipt.id
  "The amount of shares and receipts burned with this withdraw"
  amount: BigInt! # WithdrawWithReceipt.shares
  "The owner of the ERC1155 receipts and the ERC20 shares burned"
  owner: Account! # From WithdrawWithReceipt.owner
  "The caller of the transaction"
  caller: Account! # WithdrawWithReceipt.caller
}

# Created with every new ReceiptInformation event
type ReceiptInformation implements Event @entity {
  id: ID!
  "The transaction in which ReceiptInformation was emitted"
  transaction: Transaction!
  "The emitter of the event"
  emitter: Account!
  "Timestamp for ReceiptInformation event"
  timestamp: BigInt! # the timestamp of the ReceiptInformation event
  "The OffchainAssetVault that has the receipt this information is for"
  offchainAssetVault: OffchainAssetVault! # OffchainAssetVault that emitted ths Certify event
  "The receipt this information is for"
  receipt: Receipt # Link by {OffchainAssetVault address}-{TransferSingle.id}
  "The information"
  information: Bytes! # ReceiptInformation.data
  "The caller of this receipt information"
  caller: Account! # ReceiptInformation.caller
}

# Get from event Certify
type Certify implements Event @entity {
  id: ID!
  "The transaction in which Certify was emitted"
  transaction: Transaction!
  "The emitter of the event"
  emitter: Account!
  "Timestamp for Certify event"
  timestamp: BigInt! # the timestamp of the Certify event
  "The OffchainAssetVault that this certification is for"
  offchainAssetVault: OffchainAssetVault! # OffchainAssetVault that emitted ths Certify event
  "The address that submitted the certification."
  certifier: Account! # Certify.sender
  "Until when the certification is valid."
  certifiedUntil: BigInt! # Certify.until
  "The data submitted with the certification"
  data: Bytes! # Certify.data
}

# Get from event ConfiscateShares
type ConfiscateShares implements Event @entity {
  id: ID!
  "The transaction in which ConfiscateShares was emitted"
  transaction: Transaction!
  "The emitter of the event"
  emitter: Account!
  "Timestamp for ConfiscateShares event"
  timestamp: BigInt! # the timestamp of the ConfiscateShares event
  "The OffchainAssetVault that shares were confiscated for"
  offchainAssetVault: OffchainAssetVault! # OffchainAssetVault that emitted the event
  "The confiscator's address"
  confiscator: Account! # ConfiscateShares.sender
  "The confiscatee's address"
  confiscatee: Account! # ConfiscateShares.confiscatee
  "The number of shares confiscated"
  confiscated: BigInt! # ConfiscateShares.confiscated
}

# Get from event ConfiscateReceipt
type ConfiscateReceipt implements Event @entity {
  id: ID!
  "The transaction in which ConfiscateReceipt was emitted"
  transaction: Transaction!
  "The emitter of the event"
  emitter: Account!
  "Timestamp for ConfiscateReceipt event"
  timestamp: BigInt! # the timestamp of the ConfiscateReceipt event
  "The OffchainAssetVault that shares were confiscated for"
  offchainAssetVault: OffchainAssetVault! # OffchainAssetVault that emitted the event
  "The confiscator's address"
  confiscator: Account! # ConfiscateReceipt.sender
  "The confiscatee's address"
  confiscatee: Account! # ConfiscateReceipt.confiscatee
  "The receipt confiscated"
  receipt: Receipt! # Link to Receipt for {OffchainAssetVault address}-{Confiscate.id}
  "The number of receipts confiscated"
  confiscated: BigInt! # ConfiscateReceipt.confiscated
}

type SharesBalance @entity {
  id: ID!
  offchainAssetVault: OffchainAssetVault!
  account: Account
  value: BigDecimal!
  valueExact: BigInt!
  transferFromEvents: [SharesTransfer!]! @derivedFrom(field: "fromBalance")
  transferToEvents: [SharesTransfer!]! @derivedFrom(field: "toBalance")
  "The amount of shares that have been confiscated for this account."
  confiscated: BigInt! # Update if there is a ConfiscateShares for this OffchainAssetVault and Account
}

type SharesApproval implements Event @entity {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  offchainAssetVault: OffchainAssetVault!
  owner: Account!
  spender: Account!
  value: BigDecimal!
  valueExact: BigInt!
}

type SharesTransfer implements Event @entity {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  offchainAssetVault: OffchainAssetVault!
  from: Account
  fromBalance: SharesBalance
  to: Account
  toBalance: SharesBalance
  value: BigDecimal!
  valueExact: BigInt!
}

type ReceiptBalance @entity {
  id: ID!
  offchainAssetVault: OffchainAssetVault!
  receipt: Receipt!
  account: Account
  value: BigDecimal!
  valueExact: BigInt!
  transferFromEvent: [ReceiptTransfer!]! @derivedFrom(field: "fromBalance")
  transferToEvent: [ReceiptTransfer!]! @derivedFrom(field: "toBalance")
  "The amount this receipt that has been confiscated for this account"
  confiscated: BigInt! # Update if there is a ConfiscateReceipts for this OffchainAssetVault and Receipt and Account
}

type ReceiptOperator @entity {
  id: ID!
  offchainAssetVault: OffchainAssetVault!
  owner: Account!
  operator: Account!
  approved: Boolean!
}

type ReceiptTransfer implements Event @entity {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  offchainAssetVault: OffchainAssetVault!
  token: Receipt!
  operator: Account!
  from: Account
  fromBalance: ReceiptBalance
  to: Account
  toBalance: ReceiptBalance
  value: BigDecimal!
  valueExact: BigInt!
}

type RoleGranted implements Event @entity {
  id: ID!
  emitter: Account!
  account: Account!
  sender: Account!
  transaction: Transaction!
  timestamp: BigInt!
  offchainAssetVault: OffchainAssetVault!
  role: Role!
  roleHolder: RoleHolder!
}

type RoleRevoked implements Event @entity {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  offchainAssetVault: OffchainAssetVault!
  role: Role!
  roleHolder: RoleHolder!
  account: Account!
  sender: Account!
}

type RoleHolder @entity {
  id: ID!
  offchainAssetVault: OffchainAssetVault!
  role: Role!
  account: Account!
  hasRole: Boolean
  roleGrants: [RoleGranted!] @derivedFrom(field: "roleHolder")
  roleRevoked: [RoleRevoked!] @derivedFrom(field: "roleHolder")
}

type Role @entity {
  id: ID!
  offchainAssetVault: OffchainAssetVault!
  roleHash: Bytes!
  roleName: String! # match the hash to the roles in roles.sol
  roleHolders: [RoleHolder!]! @derivedFrom(field: "role")
}

interface Event {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
}

type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}
